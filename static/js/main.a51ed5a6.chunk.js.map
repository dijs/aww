{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Title","_ref","title","length","react_default","a","createElement","substring","htmlDecode","input","e","document","innerHTML","childNodes","nodeValue","BigPost","_ref2","thumbnail","preview","onClose","_React$useState3","React","useState","_React$useState4","Object","slicedToArray","preloaded","setPreloaded","img","Image","console","log","onload","src","url","style","backgroundImage","concat","className","onClick","PostItem","_ref3","onSelect","key","App","posts","_React$useState","_React$useState2","setPosts","fetch","then","res","json","data","children","map","child","images","resolutions","catch","err","usePosts","_React$useState5","_React$useState6","selected","setSelected","item","index","assign","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a51ed5a6.chunk.js","sourcesContent":["import React from 'react';\n\nfunction usePosts() {\n  const [posts, setPosts] = React.useState([]);\n  if (!posts.length) {\n    fetch('https://api.reddit.com/r/aww/new.json')\n      .then(res => res.json())\n      .then(data => {\n        setPosts(\n          data.data.children.map(child => {\n            const images =\n              child.data.preview && child.data.preview.images[0].resolutions;\n            return {\n              title: child.data.title,\n              thumbnail: child.data.thumbnail,\n              preview: images && images[images.length - 1]\n            };\n          })\n        );\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n  return { posts };\n}\n\nfunction Title({ title }) {\n  if (title.length < 36) return <h2>{title}</h2>;\n  return <h2>{title.substring(0, 45)}...</h2>;\n}\n\nfunction htmlDecode(input) {\n  var e = document.createElement('textarea');\n  e.innerHTML = input;\n  // handle case of empty input\n  return e.childNodes.length === 0 ? '' : e.childNodes[0].nodeValue;\n}\n\nfunction BigPost({ title, thumbnail, preview, onClose }) {\n  // Preload image\n  const [preloaded, setPreloaded] = React.useState(false);\n  if (!preloaded) {\n    const img = new Image();\n    console.log(title, 'is preloading');\n    img.onload = () => {\n      console.log(title, 'was preloaded');\n      setPreloaded(true);\n    };\n    img.src = htmlDecode(preview.url);\n  }\n  const src = preloaded ? htmlDecode(preview.url) : thumbnail;\n  return (\n    <main style={{ backgroundImage: `url(${src})` }}>\n      <h1>{title}</h1>\n      <div className=\"close\" onClick={onClose}>\n        <div className=\"inner\">Ã—</div>\n      </div>\n    </main>\n  );\n}\n\nfunction PostItem({ title, thumbnail, onSelect }) {\n  return (\n    <article\n      key={title}\n      onClick={onSelect}\n      style={{ backgroundImage: `url(${thumbnail})` }}\n    >\n      <Title title={title} />\n    </article>\n  );\n}\n\nfunction App() {\n  const { posts } = usePosts();\n  const [selected, setSelected] = React.useState(null);\n  if (!posts.length) {\n    return <div className=\"loading\">Loading...</div>;\n  }\n  if (selected === null) {\n    return (\n      <div className=\"container\">\n        {posts.map((item, index) => (\n          <PostItem {...item} onSelect={() => setSelected(index)} />\n        ))}\n      </div>\n    );\n  } else {\n    return <BigPost {...posts[selected]} onClose={() => setSelected(null)} />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}